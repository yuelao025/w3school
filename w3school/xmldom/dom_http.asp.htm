
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<meta http-equiv="Content-Language" content="zh-cn" />

<meta name="robots" content="all" />

<meta name="author" content="www.phper8.com" />
<meta name="MSSmartTagsPreventParsing" content="true" />
<meta http-equiv="imagetoolbar" content="false" />

<link rel="stylesheet" type="text/css" href="../c5.css" />
<link rel="shortcut icon" href="../../favicon.ico" type="image/x-icon" />

<title>XML DOM - XMLHttpRequest 对象</title>
</head>

<body class="xml">
<div id="wrapper">

<div id="header">
<a href="../index.html" title="w3school 在线教程" style="float:left;">w3school 在线教程</a>
<div id="ad_head">

</div>
</div>

<div id="navfirst">
<ul id="menu">
<li id="h"><a href="../h.htm" title="HTML 系列教程">HTML 系列教程</a></li>
<li id="b"><a href="../b.htm" title="浏览器脚本教程">浏览器脚本</a></li>
<li id="s"><a href="../s.htm" title="服务器脚本教程">服务器脚本</a></li>
<li id="d"><a href="../d.htm" title="ASP.NET 教程">ASP.NET 教程</a></li>
<li id="x"><a href="../x.htm" title="XML 系列教程">XML 系列教程</a></li>
<li id="ws"><a href="../ws.htm" title="Web Services 系列教程">Web Services 系列教程</a></li>
<li id="w"><a href="../w.htm" title="建站手册">建站手册</a></li>
</ul>
</div>

<div id="navsecond">

<div id="course"><h2>XML DOM</h2>
<ul>
<li><a href="index.htm" title="XML DOM 教程">DOM 首页</a></li>
<li><a href="dom_intro.htm" title="XML DOM 简介">DOM 简介</a></li>
<li><a href="dom_nodes.htm" title="XML DOM 节点">DOM 节点</a></li>
<li><a href="dom_nodetree.htm" title="XML DOM 节点树">DOM 节点树</a></li>
<li><a href="dom_parser.htm" title="解析 XML DOM">DOM 解析</a></li>
<li><a href="dom_loadxmldoc.htm" title="XML DOM 加载函数">DOM 加载</a></li>
<li><a href="dom_methods.htm" title="XML DOM - 属性和方法">DOM 属性和方法</a></li>
<li><a href="dom_nodes_access.htm" title="XML DOM 访问节点">DOM 访问节点</a></li>
<li><a href="dom_nodes_info.htm" title="XML DOM 节点信息">DOM 节点信息</a></li>
<li><a href="dom_nodes_nodelist.htm" title="XML DOM 节点列表">DOM 节点列表</a></li>
<li><a href="dom_nodes_traverse.htm" title="XML DOM 遍历节点">DOM 遍历节点</a></li>
<li><a href="dom_mozilla_vs_ie.htm" title="XML DOM 浏览器差异">DOM 浏览器</a></li>
<li><a href="dom_nodes_navigate.htm" title="XML DOM 定位节点">DOM 定位节点</a></li>
</ul>
<h2>节点操作</h2>
<ul>
<li><a href="dom_nodes_get.htm" title="XML DOM 获取节点值">DOM 获取节点</a></li>
<li><a href="dom_nodes_set.htm" title="XML DOM 改变节点值">DOM 改变节点</a></li>
<li><a href="dom_nodes_remove.htm" title="XML DOM 删除节点">DOM 删除节点</a></li>
<li><a href="dom_nodes_replace.htm" title="XML DOM 替换节点">DOM 替换节点</a></li>
<li><a href="dom_nodes_create.htm" title="XML DOM 创建节点">DOM 创建节点</a></li>
<li><a href="dom_nodes_add.htm" title="XML DOM 添加节点">DOM 添加节点</a></li>
<li><a href="dom_nodes_clone.htm" title="XML DOM 克隆节点">DOM 克隆节点</a></li>
<li><a href="dom_httprequest.htm" title="XMLHttpRequest 对象">DOM HttpRequest</a></li>
</ul>
<h2>XML DOM 参考手册</h2>
<ul>
<li><a href="xmldom_reference.htm" title="XML DOM 参考手册">DOM 手册目录</a></li>
<li><a href="dom_nodetype.htm" title="XML DOM 节点类型（Node Types）">DOM 节点类型</a></li>
<li><a href="dom_attribute.htm" title="XML DOM Attr 对象">DOM Attr</a></li>
<li><a href="http://www.jb51.net/w3school/xmldom/dom_cdatasection.htm" title="XML DOM CDATASection 对象">DOM CDATASection</a></li>
<li><a href="dom_characterdata.htm" title="XML DOM CharacterData 对象">DOM CharacterData</a></li>
<li><a href="dom_css2properties.htm" title="XML DOM CSS2Properties 对象">DOM CSS2Properties</a></li>
<li><a href="dom_cssrule.htm" title="XML DOM CSSRule 对象">DOM CSSRule</a></li>
<li><a href="dom_cssstylerule.htm" title="XML DOM CSSStyleRule 对象">DOM CSSStyleRule</a></li>
<li><a href="dom_cssstylesheet.htm" title="XML DOM CSSStyleSheet 对象">DOM CSSStyleSheet</a></li>
<li><a href="dom_comment.htm" title="XML DOM Comment 对象">DOM Comment</a></li>
<li><a href="dom_document.htm" title="XML DOM Document 对象">DOM Document</a></li>
<li><a href="dom_documenttype.htm" title="XML DOM DocumentType 对象">DOM DocumentType</a></li>
<li><a href="dom_domexception.htm" title="XML DOM DOMException 对象">DOM DOMException</a></li>
<li><a href="dom_domimplementation.htm" title="XML DOM Implementation 对象">DOM Implementation</a></li>
<li><a href="dom_domparser.htm" title="XML DOM DOMParser 对象">DOM DOMParser</a></li>
<li><a href="dom_element.htm" title="XML DOM Element 对象">DOM Element</a></li>
<li><a href="dom_event.htm" title="XML DOM Event 对象">DOM Event</a></li>
<li><a href="dom_htmlcollection.htm" title="XML DOM HTMLCollection 对象">DOM HTMLCollection</a></li>
<li><a href="dom_htmldocument.htm" title="XML DOM HTMLDocument 对象">DOM HTMLDocument</a></li>
<li><a href="dom_htmlelement.htm" title="XML DOM HTMLElement 对象">DOM HTMLElement</a></li>
<li><a href="dom_namednodemap.htm" title="XML DOM NamedNodeMap 对象">DOM NamedNodeMap</a></li>
<li><a href="dom_node.htm" title="XML DOM Node 对象">DOM Node</a></li>
<li><a href="dom_nodelist.htm" title="XML DOM NodeList 对象">DOM NodeList</a></li>
<li><a href="dom_errors.htm" title="XML DOM ParseError 对象">DOM ParseError</a></li>
<li><a href="dom_processinginstruction.htm" title="XML DOM ProcessingInstr 对象">DOM ProcessingInstr</a></li>
<li><a href="dom_range.htm" title="XML DOM Range 对象">DOM Range</a></li>
<li><a href="dom_rangeexception.htm" title="XML DOM RangeException 对象">DOM RangeException</a></li>
<li><a href="dom_text.htm" title="XML DOM Text 对象">DOM Text</a></li>
<li class="currentLink"><a href="dom_http.htm" title="XML DOM XMLHttpRequest 对象">DOM XMLHttpRequest</a></li>
<li><a href="dom_xmlserializer.htm" title="XML DOM XMLSerializer 对象">DOM XMLSerializer</a></li>
<li><a href="dom_xpathexpression.htm" title="XML DOM XPathExpression 对象">DOM XPathExpression</a></li>
<li><a href="dom_xpathresult.htm" title="XML DOM XPathResult 对象">DOM XPathResult</a></li>
<li><a href="dom_xsltprocessor.htm" title="XML DOM XSLTProcessor 对象">DOM XSLTProcessor</a></li>
</ul>
<h2>DOM 实例</h2>
<ul>
<li><a href="../example/xdom_examples.htm" title="XML DOM 实例">DOM 实例</a></li>
<li><a href="dom_summary.htm" title="你已经学习了XML DOM，下一步呢？">DOM 总结</a></li>
</ul>
</div><div id="selected">
<h2>建站手册</h2>
<ul>
<li><a href="../site/index.htm" title="网站构建">网站构建</a></li>
<li><a href="../w3c/index.htm" title="万维网联盟 (W3C)">万维网联盟 (W3C)</a></li>
<li><a href="../browsers/index.htm" title="浏览器信息">浏览器信息</a></li>
<li><a href="../quality/index.htm" title="网站品质">网站品质</a></li>
<li><a href="../semweb/index.htm" title="语义网">语义网</a></li>
<li><a href="../careers/index.htm" title="职业规划">职业规划</a></li>
<li><a href="../hosting/index.htm" title="网站主机">网站主机</a></li>
</ul>

<h2><a href="../about/index.htm" title="关于 W3School" id="link_about">关于 W3School</a></h2>
<h2><a href="../about/about_helping.htm" title="帮助 W3School" id="link_help">帮助 W3School</a></h2>

</div>

</div>

<div id="maincontent">

<h1>XML DOM - XMLHttpRequest 对象</h1>

<div id="tpn">
<ul class="prenext">
<li class="pre"><a href="dom_text.htm" title="XML DOM Text 对象">DOM Text</a></li>
<li class="next"><a href="dom_xmlserializer.htm" title="XML DOM XMLSerializer 对象">DOM XMLSerializer</a></li>
</ul>
</div>

<div>
<h2>XMLHttpRequest 对象</h2>

<p>XMLHttpRequest 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。XMLHttpRequest 可以同步或异步地返回 Web 服务器的响应，并且能够以文本或者一个 DOM 文档的形式返回内容。</p>
<p>尽管名为 XMLHttpRequest，它并不限于和 XML 文档一起使用：它可以接收任何形式的文本文档。</p>
<p>XMLHttpRequest 对象是名为 <a href="../ajax/index.htm" title="AJAX 教程">AJAX</a> 的 Web 应用程序架构的一项关键功能。</p>

<h3>浏览器支持</h3>
<p>XMLHttpRequest 得到了所有现代浏览器较好的支持。唯一的浏览器依赖性涉及 XMLHttpRequest 对象的创建。在 IE 5 和 IE 6 中，必须使用特定于 IE 的 ActiveXObject() 构造函数。正如在 <a href="dom_httprequest.htm" title="XMLHttpRequest 对象">XMLHttpRequest 对象</a> 这一节所介绍的。</p>

<h3>W3C 标准化</h3>
<p>XMLHttpRequest 对象还没有标准化，但是 W3C 已经开始了标准化的工作，本手册介绍的内容都是基于标准化的工作草案。</p>
<p>当前的 XMLHttpRequest 实现已经相当一致。但是和标准有细微的不同。例如，一个实现可能返回 null，而标准要求是空字符串，或者实现可能把 readyState 设置为 3 而不保证所有的响应头部都可用。</p>
</div>

<div>
<h2>属性</h2>

<h3>readyState</h3>
<p>HTTP 请求的状态.当一个 XMLHttpRequest 初次创建时，这个属性的值从 0 开始，直到接收到完整的 HTTP 响应，这个值增加到 4。</p>
<p>5 个状态中每一个都有一个相关联的非正式的名称，下表列出了状态、名称和含义：</p>

<table class="dataintable">
<tr>
<th style="width:10%;">状态</th>
<th style="width:20%;">名称</th>
<th>描述</th>
</tr>

<tr>
<td>0</td>
<td>Uninitialized</td>
<td>初始化状态。XMLHttpRequest 对象已创建或已被 abort() 方法重置。</td>
</tr>

<tr>
<td>1</td>
<td>Open</td>
<td>open() 方法已调用，但是 send() 方法未调用。请求还没有被发送。</td>
</tr>

<tr>
<td>2</td>
<td>Sent</td>
<td>Send() 方法已调用，HTTP 请求已发送到 Web 服务器。未接收到响应。</td>
</tr>

<tr>
<td>3</td>
<td>Receiving</td>
<td>所有响应头部都已经接收到。响应体开始接收但未完成。</td>
</tr>

<tr>
<td>4</td>
<td>Loaded</td>
<td>HTTP 响应已经完全接收。</td>
</tr>
</table>

<p>readyState 的值不会递减，除非当一个请求在处理过程中的时候调用了 abort() 或 open() 方法。每次这个属性的值增加的时候，都会触发 onreadystatechange 事件句柄。</p>

<h3>responseText</h3>
<p>目前为止为服务器接收到的响应体（不包括头部），或者如果还没有接收到数据的话，就是空字符串。</p>
<p>如果 readyState 小于 3，这个属性就是一个空字符串。当 readyState 为 3，这个属性返回目前已经接收的响应部分。如果 readyState 为 4，这个属性保存了完整的响应体。</p>
<p>如果响应包含了为响应体指定字符编码的头部，就使用该编码。否则，假定使用 Unicode UTF-8。</p>

<h3><a id="responseXML">responseXML</a></h3>
<p>对请求的响应，解析为 XML 并作为 <a href="dom_document.htm" title="XML DOM - Document 对象">Document 对象</a>返回。</p>

<h3>status</h3>
<p>由服务器返回的 <a href="../tags/html_ref_httpmessages.htm" title="HTTP 状态消息">HTTP 状态代码</a>，如 200 表示成功，而 404 表示 &quot;Not Found&quot; 错误。当 readyState 小于 3 的时候读取这一属性会导致一个异常。</p>

<h3>statusText</h3>
<p>这个属性用名称而不是数字指定了请求的 HTTP 的状态代码。也就是说，当状态为 200 的时候它是 &quot;OK&quot;，当状态为 404 的时候它是 &quot;Not Found&quot;。和 status 属性一样，当 readyState 小于 3 的时候读取这一属性会导致一个异常。</p>
</div>

<div>
<h2>事件句柄</h2>

<h3>onreadystatechange</h3>
<p>每次 readyState 属性改变的时候调用的事件句柄函数。当 readyState 为 3 时，它也可能调用多次。</p>
</div>

<div>
<h2>方法</h2>

<h3>abort()</h3>
<p>取消当前响应，关闭连接并且结束任何未决的网络活动。</p>
<p>这个方法把 XMLHttpRequest 对象重置为 readyState 为 0 的状态，并且取消所有未决的网络活动。例如，如果请求用了太长时间，而且响应不再必要的时候，可以调用这个方法。</p>

<h3>getAllResponseHeaders()</h3>
<p>把 HTTP 响应头部作为未解析的字符串返回。</p>
<p>如果 readyState 小于 3，这个方法返回 null。否则，它返回服务器发送的所有 HTTP 响应的头部。头部作为单个的字符串返回，一行一个头部。每行用换行符 &quot;\r\n&quot; 隔开。</p>

<h3>getResponseHeader()</h3>
<p>返回指定的 HTTP 响应头部的值。其参数是要返回的 HTTP 响应头部的名称。可以使用任何大小写来制定这个头部名字，和响应头部的比较是不区分大小写的。</p>
<p>该方法的返回值是指定的 HTTP 响应头部的值，如果没有接收到这个头部或者 readyState 小于 3 则为空字符串。如果接收到多个有指定名称的头部，这个头部的值被连接起来并返回，使用逗号和空格分隔开各个头部的值。</p>

<h3>open()</h3>
<p>初始化 HTTP 请求参数，例如 URL 和 HTTP 方法，但是并不发送请求。</p>

<h3>send()</h3>
<p>发送 HTTP 请求，使用传递给 open() 方法的参数，以及传递给该方法的可选请求体。</p>

<h3>setRequestHeader()</h3>
<p>向一个打开但未发送的请求设置或添加一个 HTTP 请求。</p>
<p></p>
</div>

<div>
<h2>XMLHttpRequest.open()</h2>

<p>初始化 HTTP 请求参数</p>

<h3>语法</h3>
<pre>open(method, url, async, username, password)</pre>
<p>method 参数是用于请求的 HTTP 方法。值包括 GET、POST 和 HEAD。</p>
<p>url 参数是请求的主体。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。</p>
<p>async 参数指示请求使用应该异步地执行。如果这个参数是 false，请求是同步的，后续对 send() 的调用将阻塞，直到响应完全接收。如果这个参数是 true 或省略，请求是异步的，且通常需要一个 onreadystatechange 事件句柄。</p>
<p>username 和 password 参数是可选的，为 url 所需的授权提供认证资格。如果指定了，它们会覆盖 url 自己指定的任何资格。</p>

<h3>说明</h3>
<p>这个方法初始化请求参数以供 send() 方法稍后使用。它把 readyState 设置为 1，删除之前指定的所有请求头部，以及之前接收的所有响应头部，并且把 responseText、responseXML、status 以及 statusText 参数设置为它们的默认值。当 readyState 为 0 的时候（当 XMLHttpRequest 对象刚创建或者 abort() 方法调用后）以及当 readyState 为 4 时（已经接收响应时），调用这个方法是安全的。当针对任何其他状态调用的时候，open() 方法的行为是为指定的。</p>
<p>除了保存供 send() 方法使用的请求参数，以及重置 XMLHttpRequest 对象以便复用，open() 方法没有其他的行为。要特别注意，当这个方法调用的时候，实现通常不会打开一个到 Web 服务器的网络连接。</p>
</div>

<div>
<h2>XMLHttpRequest.send()</h2>
<p>发送一个 HTTP 请求</p>

<h3>语法</h3>
<pre>send(body)</pre>
<p>如果通过调用 open() 指定的 HTTP 方法是 POST 或 PUT，body 参数指定了请求体，作为一个字符串或者 <a href="dom_document.htm" title="XML DOM - Document 对象">Document 对象</a>。如果请求体不适必须的话，这个参数就为 null。对于任何其他方法，这个参数是不可用的，应该为 null（有些实现不允许省略该参数）。</p>

<h3>说明</h3>
<p>这个方法导致一个 HTTP 请求发送。如果之前没有调用 open()，或者更具体地说，如果 readyState 不是 1，send() 抛出一个异常。否则，它发送一个 HTTP 请求，该请求由以下几部分组成：</p>

<ul>
<li>之前调用 open() 时指定的 HTTP 方法、URL 以及认证资格（如果有的话）。</li>
<li>之前调用 setRequestHeader() 时指定的请求头部（如果有的话）。</li>
<li>传递给这个方法的 <i>body</i> 参数。</li>
</ul>

<p>一旦请求发布了，send() 把 readyState 设置为 2，并触发 onreadystatechange 事件句柄。</p>
<p>如果之前调用的 open() 参数 async 为 false，这个方法会阻塞并不会返回，直到 readyState 为 4 并且服务器的响应被完全接收。否则，如果 async 参数为 true，或者这个参数省略了，send() 立即返回，并且正如后面所介绍的，服务器响应将在一个后台线程中处理。</p>
<p>如果服务器响应带有一个 HTTP 重定向，send() 方法或后台线程自动遵从重定向。当所有的 HTTP 响应头部已经接收，send() 或后台线程把 readyState 设置为 3 并触发 onreadystatechange 事件句柄。如果响应较长，send() 或后台线程可能在状态 3 中触发 onreadystatechange 事件句柄：这可以作为一个下载进度指示器。最后，当响应完成，send() 或后台线程把 readyState 设置为 4，并最后一次触发事件句柄。</p>
</div>

<div>
<h2>XMLHttpRequest.setRequestHeader()</h2>

<h3>语法</h3>
<pre>setRequestHeader(name, value)</pre>
<p>name 参数是要设置的头部的名称。这个参数不应该包括空白、冒号或换行。</p>
<p>value 参数是头部的值。这个参数不应该包括换行。</p>

<h3>说明</h3>
<p>setRequestHeader() 方法指定了一个 HTTP 请求的头部，它应该包含在通过后续 send() 调用而发布的请求中。这个方法只有当 readyState 为 1 的时候才能调用，例如，在调用了 open() 之后，但在调用 send() 之前。</p>
<p>如果带有指定名称的头部已经被指定了，这个头部的新值就是：之前指定的值，加上逗号、空白以及这个调用指定的值。</p>
<p>如果 open() 调用指定了认证资格，XMLHttpRequest 自动发送一个适当的 Authorization 请求头部。但是，你可以使用 setRequestHeader() 来添加这个头部。类似地，如果 Web 服务器已经保存了和传递给 open() 的 URL 相关联的 cookie，适当的 Cookie 或 Cookie2 头部也自动地包含到请求中。可以通过调用 setRequestHeader() 来把这些 cookie 添加到头部。XMLHttpRequest 也可以为 User-Agent 头部提供一个默认值。如果它这么做，你为该头部指定的任何值都会添加到这个默认值后面。</p>
<p>有些请求头部由 XMLHttpRequest 自动设置而不是由这个方法设置，以符合 HTTP 协议。这包括如下和代理相关的头部：</p>

<ul>
<li>Host</li>
<li>Connection</li>
<li>Keep-Alive</li>
<li>Accept-charset</li>
<li>Accept-Encoding</li>
<li>If-Modified-Since</li>
<li>If-None-Match</li>
<li>If-Range</li>
<li>Range</li>
</ul>
</div>

<div id="bpn">
<ul class="prenext">
<li class="pre"><a href="dom_text.htm" title="XML DOM Text 对象">DOM Text</a></li>
<li class="next"><a href="dom_xmlserializer.htm" title="XML DOM XMLSerializer 对象">DOM XMLSerializer</a></li>
</ul>
</div>
</div>

<div id="sidebar">

<div id="searchui">
<form method="get" id="searchform" action="http://www.baidu.com/search">
<p><label for="searched_content">Search:</label></p>
<p><input type="hidden" name="s" value="10520733385329581432"><input type="hidden" name="ie" value="gbk"></p>
<p>
<input type="text" name="q" class="box"  id="searched_content" title="在此输入搜索内容。" />
<input type="submit" value="Go" class="button" title="搜索！" />
</p>
</form>
</div>

<div id="tools">
<h5 id="tools_reference"><a href="xmldom_reference.htm">XML DOM 参考手册</a></h5>
<h5 id="tools_example"><a href="../example/xdom_examples.htm">XML DOM 实例</a></h5>
</div>

<div id="ad">
<h2>赞助商链接</h2>

</div>

</div>

<div id="footer"> <p> <a href="http://www.phper8.com">php吧</a> 提供的内容仅用于培训。我们不保证内容的正确性。通过使用本站内容随之而来的风险与本站无关。<a href="http://www.phper8.com">php吧</a> 简体中文版的所有内容仅供测试，对任何法律问题及风险不承担任何责任。 </p>  <p> 当使用本站时，代表您已接受了本站的<a href="about_use.htm" title="关于使用">使用条款</a>和<a href="about_privacy.htm" title="关于隐私">隐私条款</a>。版权所有，保留一切权利。 <a href="http://www.miitbeian.gov.cn/">苏ICP备17024361号</a> </p>。

</div>

</div>
</body>
</html>