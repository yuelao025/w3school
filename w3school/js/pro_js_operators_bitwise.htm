
<!DOCTYPE html>
<html lang="zh-cn">
<head>
<meta charset="gbk" />
<meta name="robots" content="all" />
<meta name="author" content="www.phper8.com" />
<link rel="stylesheet" type="text/css" href="../c5.css" />

<title>ECMAScript 位运算符</title>
</head>

<body class="browserscripting">
<div id="wrapper" class="as">

<div id="header">
<a href="../index.html" title="w3school 在线教程" style="float:left;">w3school 在线教程</a>
<div id="ad_head">

</div>
</div>

<div id="navfirst">
<ul id="menu">
<li id="h"><a href="../h.htm" title="HTML 系列教程">HTML 系列教程</a></li>
<li id="b"><a href="../b.htm" title="浏览器脚本教程">浏览器脚本</a></li>
<li id="s"><a href="../s.htm" title="服务器脚本教程">服务器脚本</a></li>
<li id="d"><a href="../d.htm" title="ASP.NET 教程">ASP.NET 教程</a></li>
<li id="x"><a href="../x.htm" title="XML 系列教程">XML 系列教程</a></li>
<li id="ws"><a href="../ws.htm" title="Web Services 系列教程">Web Services 系列教程</a></li>
<li id="w"><a href="../w.htm" title="建站手册">建站手册</a></li>
</ul>
</div>

<div id="navsecond">

<div id="course"><h2>JavaScript 简介</h2>
<ul>
<li><a href="index_pro.htm" title="JavaScript 高级教程">JavaScript 高级教程</a></li>
<li><a href="pro_js_history.htm" title="JavaScript 历史">JavaScript 历史</a></li>
<li><a href="pro_js_implement.htm" title="JavaScript 实现">JavaScript 实现</a></li>
</ul>
<h2>ECMAScript 基础</h2>
<ul>
<li><a href="pro_js_syntax.htm" title="ECMAScript 语法">ECMAScript 语法</a></li>
<li><a href="pro_js_variables.htm" title="ECMAScript 变量">ECMAScript 变量</a></li>
<li><a href="pro_js_keywords.htm" title="ECMAScript 关键字">ECMAScript 关键字</a></li>
<li><a href="pro_js_reservedwords.htm" title="ECMAScript 保留字">ECMAScript 保留字</a></li>
<li><a href="pro_js_value.htm" title="ECMAScript 值">ECMAScript 值</a></li>
<li><a href="pro_js_primitivetypes.htm" title="ECMAScript 原始类型">ECMAScript 原始类型</a></li>
<li><a href="pro_js_typeconversion.htm" title="ECMAScript 类型转换">ECMAScript 类型转换</a></li>
<li><a href="pro_js_referencetypes.htm" title="ECMAScript 引用类型">ECMAScript 引用类型</a></li>
</ul>
<h2>ECMAScript 运算符</h2>
<ul>
<li><a href="pro_js_operators_unary.htm" title="ECMAScript 一元运算符">一元运算符</a></li>
<li class="currentLink"><a href="pro_js_operators_bitwise.htm" title="ECMAScript 位运算符">位运算符</a></li>
<li><a href="pro_js_operators_boolean.htm" title="ECMAScript 逻辑运算符">逻辑运算符</a></li>
<li><a href="pro_js_operators_multiplicative.htm" title="ECMAScript 乘性运算符">乘性运算符</a></li>
<li><a href="pro_js_operators_additive.htm" title="ECMAScript 加性运算符">加性运算符</a></li>
<li><a href="pro_js_operators_relational.htm" title="ECMAScript 关系运算符">关系运算符</a></li>
<li><a href="pro_js_operators_equality.htm" title="ECMAScript 等性运算符">等性运算符</a></li>
<li><a href="pro_js_operators_conditional.htm" title="ECMAScript 条件运算符">条件运算符</a></li>
<li><a href="pro_js_operators_assignment.htm" title="ECMAScript 赋值运算符">赋值运算符</a></li>
<li><a href="pro_js_operators_comma.htm" title="ECMAScript 逗号运算符">逗号运算符</a></li>
</ul>
<h2>ECMAScript 语句</h2>
<ul>
<li><a href="pro_js_statements_if.htm" title="ECMAScript if 语句">if 语句</a></li>
<li><a href="pro_js_statements_iterative.htm" title="ECMAScript 迭代语句">迭代语句</a></li>
<li><a href="pro_js_statements_labeled.htm" title="ECMAScript 标签语句">标签语句</a></li>
<li><a href="pro_js_statements_break_continue.htm" title="ECMAScript break 和 continue 语句">break 语句</a></li>
<li><a href="pro_js_statements_break_continue.htm" title="ECMAScript break 和 continue 语句">continue 语句</a></li>
<li><a href="pro_js_statements_with.htm" title="ECMAScript with 语句">with 语句</a></li>
<li><a href="pro_js_statements_switch.htm" title="ECMAScript switch 语句">switch 语句</a></li>
</ul>
<h2>ECMAScript 函数</h2>
<ul>
<li><a href="pro_js_functions.htm" title="ECMAScript 函数概述">函数概述</a></li>
<li><a href="pro_js_functions_arguments_object.htm" title="ECMAScript arguments 对象">arguments 对象</a></li>
<li><a href="pro_js_functions_function_object.htm" title="ECMAScript Function 对象（类）">Function 对象</a></li>
<li><a href="pro_js_functions_closures.htm" title="ECMAScript 闭包（closure）">闭包（closure）</a></li>
</ul>
<h2>ECMAScript 对象</h2>
<ul>
<li><a href="pro_js_object_oriented.htm" title="ECMAScript 面向对象技术">面向对象</a></li>
<li><a href="pro_js_object_working_with.htm" title="ECMAScript 对象应用">对象应用</a></li>
<li><a href="pro_js_object_types.htm" title="ECMAScript 对象类型">对象类型</a></li>
<li><a href="pro_js_object_scope.htm" title="ECMAScript 对象作用域">对象作用域</a></li>
<li><a href="pro_js_object_defining.htm" title="ECMAScript 定义类或对象">定义类或对象</a></li>
<li><a href="pro_js_object_modifying.htm" title="ECMAScript 修改对象">修改对象</a></li>
</ul>
<h2>ECMAScript 继承</h2>
<ul>
<li><a href="pro_js_inheritance_in_action.htm" title="ECMAScript 继承机制实例">继承机制实例</a></li>
<li><a href="pro_js_inheritance_implementing.htm" title="ECMAScript 继承机制实现">继承机制实现</a></li>
</ul>
<h2>JS 实例和测验</h2>
<ul>
<li><a href="../example/jseg_examples.htm" title="JavaScript 实例">JS 实例</a></li>
<li><a href="../example/jsrf_examples.htm" title="JavaScript 对象实例">JS 对象实例</a></li>
<li><a href="js_quiz.htm" title="JavaScript 测验">JS 测验</a></li>
</ul>
<h2>JS 参考手册</h2>
<ul>
<li><a href="../jsref/index.htm" title="JavaScript 对象">JavaScript 对象</a></li>
<li><a href="../htmldom/htmldom_reference.htm" title="HTML DOM 对象">HTML DOM 对象</a></li>
</ul>
</div><div id="selected">
<h2>建站手册</h2>
<ul>
<li><a href="../site/index.htm" title="网站构建">网站构建</a></li>
<li><a href="../w3c/index.htm" title="万维网联盟 (W3C)">万维网联盟 (W3C)</a></li>
<li><a href="../browsers/index.htm" title="浏览器信息">浏览器信息</a></li>
<li><a href="../quality/index.htm" title="网站品质">网站品质</a></li>
<li><a href="../semweb/index.htm" title="语义网">语义网</a></li>
<li><a href="../careers/index.htm" title="职业规划">职业规划</a></li>
<li><a href="../hosting/index.htm" title="网站主机">网站主机</a></li>
</ul>

<h2><a href="../about/index.htm" title="关于 W3School" id="link_about">关于 W3School</a></h2>
<h2><a href="../about/about_helping.htm" title="帮助 W3School" id="link_help">帮助 W3School</a></h2>

</div>

</div>

<div id="maincontent">

<h1>ECMAScript 位运算符</h1>

<div id="tpn">
<ul class="prenext">
<li class="pre"><a href="pro_js_operators_unary.htm" title="ECMAScript 一元运算符">一元运算符</a></li>
<li class="next"><a href="pro_js_operators_boolean.htm" title="ECMAScript 逻辑运算符">逻辑运算符</a></li>
</ul>
</div>

<div>
<p><strong>位运算符是在数字底层（即表示数字的 32 个数位）进行操作的。</strong></p>
</div>

<div>
<h2>重温整数</h2>

<p>ECMAScript 整数有两种类型，即有符号整数（允许用正数和负数）和无符号整数（只允许用正数）。在 ECMAScript 中，所有整数字面量默认都是有符号整数，这意味着什么呢？</p>

<p>有符号整数使用 31 位表示整数的数值，用第 32 位表示整数的符号，0 表示正数，1 表示负数。数值范围从 -2147483648 到 2147483647。</p>

<p>可以以两种不同的方式存储二进制形式的有符号整数，一种用于存储正数，一种用于存储负数。正数是以真二进制形式存储的，前 31 位中的每一位都表示 2 的幂，从第 1 位（位 0）开始，表示 2<sup>0</sup>，第 2 位（位 1）表示 2<sup>1</sup>。没用到的位用 0 填充，即忽略不计。例如，下图展示的是数 18 的表示法。</p>

<img src="../i/ct_js_integer_binary_signed_32bits.gif" alt="32 位二进制表示的有符号整数" />


<p>18 的二进制版本只用了前 5 位，它们是这个数字的有效位。把数字转换成二进制字符串，就能看到有效位：</p>

<pre>
var iNum = 18;
alert(iNum.toString(2));	<span>//输出 &quot;10010&quot;</span>
</pre>

<p>这段代码只输出 &quot;10010&quot;，而不是 18 的 32 位表示。其他的数位并不重要，因为仅使用前 5 位即可确定这个十进制数值。如下图所示：</p>

<img src="../i/ct_js_integer_binary_number18.gif" alt="5 位二进制表示的整数 18" />

<p>负数也存储为二进制代码，不过采用的形式是二进制补码。计算数字二进制补码的步骤有三步：</p>

<ol>
<li>确定该数字的非负版本的二进制表示（例如，要计算 -18的二进制补码，首先要确定 18 的二进制表示）</li>
<li>求得二进制反码，即要把 0 替换为 1，把 1 替换为 0</li>
<li>在二进制反码上加 1</li>
</ol>

<p>要确定 -18 的二进制表示，首先必须得到 18 的二进制表示，如下所示：</p>

<pre>0000 0000 0000 0000 0000 0000 0001 0010</pre>

<p>接下来，计算二进制反码，如下所示：</p>

<pre>1111 1111 1111 1111 1111 1111 1110 1101</pre>

<p>最后，在二进制反码上加 1，如下所示：</p>

<pre>
1111 1111 1111 1111 1111 1111 1110 1101
                                      1
---------------------------------------
1111 1111 1111 1111 1111 1111 1110 1110
</pre>

<p>因此，-18 的二进制表示即 1111 1111 1111 1111 1111 1111 1110 1110。记住，在处理有符号整数时，开发者不能访问 31 位。</p>

<p>有趣的是，把负整数转换成二进制字符串后，ECMAScript 并不以二进制补码的形式显示，而是用数字绝对值的标准二进制代码前面加负号的形式输出。例如：</p>

<pre>
var iNum = -18;
alert(iNum.toString(2));	<span>//输出 &quot;-10010&quot;</span>
</pre>

<p>这段代码输出的是 &quot;-10010&quot;，而非二进制补码，这是为避免访问位 31。为了简便，ECMAScript 用一种简单的方式处理整数，使得开发者不必关心它们的用法。</p>

<p>另一方面，无符号整数把最后一位作为另一个数位处理。在这种模式中，第 32 位不表示数字的符号，而是值 2<sup>31</sup>。由于这个额外的位，无符号整数的数值范围为 0 到 4294967295。对于小于 2147483647 的整数来说，无符号整数看来与有符号整数一样，而大于 2147483647 的整数则要使用位 31（在有符号整数中，这一位总是 0）。</p>

<p>把无符号整数转换成字符串后，只返回它们的有效位。</p>

<p class="important"><span>注意：</span>所有整数字面量都默认存储为有符号整数。只有 ECMAScript 的位运算符才能创建无符号整数。</p>
</div>


<div>
<h2>位运算 NOT</h2>

<p>位运算 NOT 由否定号（~）表示，它是 ECMAScript 中为数不多的与二进制算术有关的运算符之一。</p>

<p>位运算 NOT 是三步的处理过程：</p>

<ol>
<li>把运算数转换成 32 位数字</li>
<li>把二进制数转换成它的二进制反码</li>
<li>把二进制数转换成浮点数</li>
</ol>

<p>例如：</p>

<pre>
var iNum1 = 25;		<span>//25 等于 00000000000000000000000000011001</span>
<code>var iNum2 = ~iNum1;</code>	<span>//转换为 11111111111111111111111111100110</span>
alert(iNum2);		<span>//输出 &quot;-26&quot;</span>
</pre>

<p>位运算 NOT 实质上是对数字求负，然后减 1，因此 25 变 -26。用下面的方法也可以得到同样的方法：</p>

<pre>
var iNum1 = 25;
var iNum2 = -iNum1 -1;
alert(iNum2);	<span>//输出 -26</span>
</pre>
</div>


<div>
<h2>位运算 AND</h2>

<p>位运算 AND 由和号（&amp;）表示，直接对数字的二进制形式进行运算。它把每个数字中的数位对齐，然后用下面的规则对同一位置上的两个数位进行 AND 运算：</p>

<table class="dataintable">
<tr>
<th>第一个数字中的数位</th>
<th>第二个数字中的数位</th>
<th>结果</th>
</tr>

<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>

<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>

<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>

<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</table>

<p>例如，要对数字 25 和 3 进行 AND 运算，代码如下所示：</p>

<pre>
var iResult = 25 &amp; 3;
alert(iResult);	<span>//输出 &quot;1&quot;</span>
</pre>

<p>25 和 3 进行 AND 运算的结果是 1。为什么？分析如下：</p>

<pre>
 25 = 0000 0000 0000 0000 0000 0000 0001 1001
  3 = 0000 0000 0000 0000 0000 0000 0000 0011
---------------------------------------------
AND = 0000 0000 0000 0000 0000 0000 0000 0001
</pre>

<p>可以看出，在 25 和 3 中，只有一个数位（位 0）存放的都是 1，因此，其他数位生成的都是 0，所以结果为 1。</p>
</div>


<div>
<h2>位运算 OR</h2>

<p>位运算 OR 由符号（|）表示，也是直接对数字的二进制形式进行运算。在计算每位时，OR 运算符采用下列规则：</p>

<table class="dataintable">
<tr>
<th>第一个数字中的数位</th>
<th>第二个数字中的数位</th>
<th>结果</th>
</tr>

<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>

<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>

<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>

<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</table>

<p>仍然使用 AND 运算符所用的例子，对 25 和 3 进行 OR 运算，代码如下：</p>

<pre>
var iResult = 25 | 3;
alert(iResult);	<span>//输出 &quot;27&quot;</span>
</pre>

<p>25 和 3 进行 OR 运算的结果是 27：</p>

<pre>
25 = 0000 0000 0000 0000 0000 0000 0001 1001
 3 = 0000 0000 0000 0000 0000 0000 0000 0011
--------------------------------------------
OR = 0000 0000 0000 0000 0000 0000 0001 1011
</pre>

<p>可以看出，在两个数字中，共有 4 个数位存放的是 1，这些数位被传递给结果。二进制代码 11011 等于 27。</p>
</div>


<div>
<h2>位运算 XOR</h2>

<p>位运算 XOR 由符号（^）表示，当然，也是直接对二进制形式进行运算。XOR 不同于 OR，当只有一个数位存放的是 1 时，它才返回 1。真值表如下：</p>

<table class="dataintable">
<tr>
<th>第一个数字中的数位</th>
<th>第二个数字中的数位</th>
<th>结果</th>
</tr>

<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>

<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>

<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>

<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</table>

<p>对 25 和 3 进行 XOR 运算，代码如下：</p>

<pre>
var iResult = 25 ^ 3;
alert(iResult);	<span>//输出 &quot;26&quot;</span>
</pre>

<p>25 和 3 进行 XOR 运算的结果是 26：</p>

<pre>
 25 = 0000 0000 0000 0000 0000 0000 0001 1001
  3 = 0000 0000 0000 0000 0000 0000 0000 0011
---------------------------------------------
XOR = 0000 0000 0000 0000 0000 0000 0001 1010
</pre>

<p>可以看出，在两个数字中，共有 4 个数位存放的是 1，这些数位被传递给结果。二进制代码 11010 等于 26。</p>
</div>


<div>
<h2>左移运算</h2>

<p>左移运算由两个小于号表示（&lt;&lt;）。它把数字中的所有数位向左移动指定的数量。例如，把数字 2（等于二进制中的 10）左移 5 位，结果为 64（等于二进制中的 1000000）：</p>

<pre>
var iOld = 2;		<span>//等于二进制 10</span>
var iNew = iOld &lt;&lt; 5;	<span>//等于二进制 1000000 十进制 64</span>
</pre>

<p class="important"><span>注意：</span>在左移数位时，数字右边多出 5 个空位。左移运算用  0 填充这些空位，使结果成为完整的 32 位数字。</p>

<img src="../i/ct_js_operators_bitwise_leftshift.gif" alt="数字 2 进行左移运算" />

<p class="important"><span>注意：</span>左移运算保留数字的符号位。例如，如果把 -2 左移 5 位，得到的是 -64，而不是 64。“符号仍然存储在第 32 位中吗？”是的，不过这在 ECMAScript 后台进行，开发者不能直接访问第 32 个数位。即使输出二进制字符串形式的负数，显示的也是负号形式（例如，-2 将显示 -10。）</p>
</div>


<div>
<h2>有符号右移运算</h2>

<p>有符号右移运算符由两个大于号表示（&gt;&gt;）。它把 32 位数字中的所有数位整体右移，同时保留该数的符号（正号或负号）。有符号右移运算符恰好与左移运算相反。例如，把 64 右移 5 位，将变为 2：</p>

<pre>
var iOld = 64;		<span>//等于二进制 1000000</span>
var iNew = iOld &gt;&gt; 5;	<span>//等于二进制 10 十进制 2</span>
</pre>

<p>同样，移动数位后会造成空位。这次，空位位于数字的左侧，但位于符号位之后。ECMAScript 用符号位的值填充这些空位，创建完整的数字，如下图所示：</p>

<img src="../i/ct_js_operators_bitwise_signedrightshift.gif" alt="数字 64 进行有符号右移运算" />
</div>


<div>
<h2>无符号右移运算</h2>

<p>无符号右移运算符由三个大于号（&gt;&gt;&gt;）表示，它将无符号 32 位数的所有数位整体右移。对于正数，无符号右移运算的结果与有符号右移运算一样。</p>

<p>用有符号右移运算中的例子，把 64 右移 5 位，将变为 2：</p>

<pre>
var iOld = 64;		<span>//等于二进制 1000000</span>
var iNew = iOld &gt;&gt;&gt; 5;	<span>//等于二进制 10 十进制 2</span>
</pre>

<p>对于负数，情况就不同了。</p>

<p>无符号右移运算用 0 填充所有空位。对于正数，这与有符号右移运算的操作一样，而负数则被作为正数来处理。</p>

<p>由于无符号右移运算的结果是一个 32 位的正数，所以负数的无符号右移运算得到的总是一个非常大的数字。例如，如果把 -64 右移 5 位，将得到 134217726。如何得到这种结果的呢？</p>

<p>要实现这一点，需要把这个数字转换成无符号的等价形式（尽管该数字本身还是有符号的），可以通过以下代码获得这种形式：</p>

<pre>var iUnsigned64 = -64 &gt;&gt;&gt; 0;</pre>

<p>然后，用 Number 类型的 toString() 获取它的真正的位表示，采用的基为 2：</p>

<pre>alert(iUnsigned64.toString(2));</pre>

<p>这将生成 11111111111111111111111111000000，即有符号整数 -64 的二进制补码表示，不过它等于无符号整数 4294967232。</p>

<p>出于这种原因，使用无符号右移运算符要小心。</p>
</div>


<div id="bpn">
<ul class="prenext">
<li class="pre"><a href="pro_js_operators_unary.htm" title="ECMAScript 一元运算符">一元运算符</a></li>
<li class="next"><a href="pro_js_operators_boolean.htm" title="ECMAScript 逻辑运算符">逻辑运算符</a></li>
</ul>
</div>

</div>

<div id="sidebar">

<div id="searchui">
<form method="get" id="searchform" action="http://www.baidu.com/search">
<p><label for="searched_content">Search:</label></p>
<p><input type="hidden" name="s" value="10520733385329581432"><input type="hidden" name="ie" value="gbk"></p>
<p>
<input type="text" name="q" class="box"  id="searched_content" title="在此输入搜索内容。" />
<input type="submit" value="Go" class="button" title="搜索！" />
</p>
</form>
</div>

<div id="tools">
<h5 id="tools_reference"><a href="../jsref/index.htm">JavaScript 参考手册</a></h5>
<h5 id="tools_example"><a href="../example/jseg_examples.htm">JavaScript 实例</a></h5>
<h5 id="tools_quiz"><a href="js_quiz.htm">JavaScript 测验</a></h5>
</div>

<div id="ad">
<h2>赞助商链接</h2>

</div>

</div>

<div id="footer">

</div>

</div>
</body>
</html>